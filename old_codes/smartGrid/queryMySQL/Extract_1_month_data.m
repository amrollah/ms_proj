% This file queries the the SQL database generated by the KNX agents

% 24.06.2013
% Luis Dominguez
% Control & Optimization
% ABB Schweiz

% This code gets saturated when querying the database!!

%-------------------------------------------------------------------------

clear all
clf
clc

%% set path
%addpath(fullfile(pwd, 'src'));
%addpath(fullfile(pwd));
javaaddpath('lib/mysql-connector-java-5.1.6/mysql-connector-java-5.1.6-bin.jar');

%% import classes
import edu.stanford.covert.db.MySQLDatabase;

%% create database connection
% Smart meters:
% http://10.41.94.130   - Works
% http://10.41.94.131   - Doesn't Work

%db = MySQLDatabase('covertlab.stanford.edu', 'test', 'test', 'test');
db = MySQLDatabase('10.41.94.39', 'smartgrid', 'root', 'smartgrid');



%% send, retrieve blob using sql

selected_month  = 8;
selected_year   = 2013;

selected_start = datestr(datenum(selected_year,selected_month,1),'yyyy-mm-dd')
selected_end = datestr(datenum(selected_year,selected_month+1,1)-1,'yyyy-mm-dd')
 

% ---------------------  Atmospheric Readings ----------------------------
% Pyranometer
%db.prepareStatement(['select * from id_16663 order by timestamp desc limit ',lim]);
db.prepareStatement(['select * from id_16663 where timestamp between "',selected_start,' 00:00" and "',selected_end,' 23:59"  limit 10000000000000']);

GHI_result = db.query();

%from past to now
dt_GHI = datenum(GHI_result.timestamp(end:-1:1) );
GHI = GHI_result.value(end:-1:1)  * 100;  %Multiply by 100 to match KNX display 


% % %Wind Speed
%db.prepareStatement(['select * from id_16637 order by timestamp desc limit ',lim]);
% db.prepareStatement('select * from id_16637 where timestamp between "2012-06-010 00:00" and "2013-07-02 23:59"  limit 1e8');
% WindSpeed_result = db.query(); % Wind does not work !!


% % Wind Speed Threshold
% db.prepareStatement('select * from id_16641 order by timestamp desc limit ',lim]); 
% WindSpeedThreshold_result = db.query();
%  
% WindSpeedThreshold_result.timestamp(1)  
% WindSpeedThreshold_result.value(1)

%Temperature
%db.prepareStatement(['select * from id_16636 order by timestamp desc limit ',lim]); 
db.prepareStatement(['select * from id_16636 where timestamp between "',selected_start,' 00:00" and "',selected_end,' 23:59"  limit 10000000000000']);

Temp_result = db.query();

Temp_result.timestamp(1);  % Temp & Pyr are almost syncronized - Thy have the same dates
Temp_result.value(1);

%from past to now
dt_Temp = datenum(Temp_result.timestamp(end:-1:1) );
Temp = Temp_result.value(end:-1:1) ;  %

% Brightness Left
%db.prepareStatement(['select * from id_16635 order by timestamp desc limit ',lim]); 
%db.prepareStatement('select * from id_16635 where timestamp between "2012-06-010 00:00" and "2013-07-02 23:59"  limit 1e8');

%BrightLeft_result = db.query();

% BrightLeft_result.timestamp(1); 
% BrightLeft_result.value(1) /1000;  % divide by 1000 to get Lux units

% Brightness Center
%db.prepareStatement(['select * from id_16634 order by timestamp desc limit ',lim]); 
%db.prepareStatement('select * from id_16634 where timestamp between "2012-06-010 00:00" and "2013-07-02 23:59"  limit 1e8');
%BrightCenter_result = db.query();

% BrightCenter_result.timestamp(1) 
% BrightCenter_result.value(1) /1000;  % divide by 1000 to get Lux units

% Brightness Right
%db.prepareStatement(['select * from id_16633 order by timestamp desc limit ',lim]); 
%db.prepareStatement('select * from id_16633 where timestamp between "2012-06-010 00:00" and "2013-07-02 23:59"  limit 1e8');
%BrightRight_result = db.query();

% BrightRight_result.timestamp(1); 
% BrightRight_result.value(1) /1000;  % divide by 1000 to get Lux units


% ----------------------  Power Generation Readings -----------------------
% Power
%db.prepareStatement(['select * from id_16525 order by timestamp desc limit ',lim]);
db.prepareStatement(['select * from id_16525 where timestamp between "',selected_start,' 00:00" and "',selected_end,' 23:59"  limit 10000000000000']);

PV_result = db.query();

%from past to now
dt_PV = datenum(PV_result.timestamp(end:-1:1) );
P_PV  = -1*PV_result.value(end:-1:1) ;  


%% -------------- Plot Unsincronyzed Values

% figure(1)
% %GHI
% subplot(3,1,1)
% plot(dt_GHI,GHI), 
% %hold on, plot(dt_past_window,GHI_past,'m'), hold off 
% title(['GHI - ', datestr(floor(dt_GHI(end)))])
% ylabel('W/m^2')
% %xlim([dt_GHI(1) - 1/24/60, dt_GHI(end) + 1/24/60  ])
% datetick('x','HH:MM','keeplimits')
% 
% % Temperature
% subplot(3,1,2)
% plot(dt_Temp,Temp),
% ylabel ('°C')
% title(['Temperature - ',datestr(floor(dt_GHI(end)))])
% %xlim([dt_GHI(1) - 1/24/60, dt_GHI(end) + 1/24/60  ])
% datetick('x','HH:MM','keeplimits')
% 
% subplot(3,1,3)
% plot(dt_PV,P_PV), 
% ylabel ('W')
% title(['Generated Power - ', datestr(floor(dt_PV(end)))])
% %xlim([dt_GHI(1) - 1/24/60, dt_GHI(end) + 1/24/60])
% datetick('x','HH:MM','keeplimits')
% %set(gca,'XTick',0:0.2:1); %Set the XTicks values
% %datetick('x','HH','keepticks')
% %xlim([0 1])
% ylim([0 5e3])




%% Resample all variables using the GHI sampling rate

% Variables have different time stamps
% Resampling variables / to make them all uniform

Temp_resampled = interp1(dt_Temp,Temp,dt_GHI,'spline');
P_PV_resampled = interp1(dt_PV,P_PV,dt_GHI,'spline');


%% 
figure(2)
subplot(3,1,1)
plot(dt_GHI,GHI)
%xlim([dt_past_window(1) - 1/24/60, dt_past_window(end) + 1/24/60  ])
title(['GHI for ', datestr(floor(dt_GHI(end)))])
ylabel('W/m^2')
datetick('x','HH:MM','keeplimits')

% Temperature
subplot(3,1,2)
plot(dt_GHI,Temp_resampled),
%xlim([dt_past_window(1) - 1/24/60, dt_past_window(end) + 1/24/60  ])
ylabel ('°C')
title(['Temperature for ',datestr(floor(dt_GHI(end)))])
datetick('x','HH:MM','keeplimits')

%Power
subplot(3,1,3)
plot(dt_GHI,P_PV_resampled), 
%xlim([dt_past_window(1) - 1/24/60, dt_past_window(end) + 1/24/60  ])
ylabel ('W')
title(['Power for ', datestr(floor(dt_GHI(end)))])
%set(gca,'XTick',0:0.2:1); %Set the XTicks values
datetick('x','HH:MM','keeplimits')
%datetick('x','HH','keepticks')
%xlim([0 1])
ylim([0 5e3])


% Plot relationship GHI-PV
%figure; scatter(GHI,P_PV_resampled)


%% Get Clear Sky Values


% -------------- Apply Clear Sky Model --------------------------
Location.latitude =  47+27/60+33.92/60/60;    %   47°27'33.92" N  Local latitude of CHCRC.C1 roof  (positive if north of equator)
Location.longitude = 8+16/60+38.50/60/60;     %   8°16'38.50" E   Local Longitude of CHCRC.C1 roof (negative if west)
Location.altitude =  455;                     %   [m]  

            
DN = dt_GHI; %dt_past_window; %GHIData{iter}.Time %+  start_date    ;

% Siwtzerland has a Central European Summer Time (CEST) +0200 UTC 
UTC = 2; %4.5; %  UTC is 2 but I have noticed an offset of 2:30 min.
Time = pvl_maketimestruct(DN, UTC);

% Clear sky GHI, DNI, and DHI from Ineichen/Perez model
[ClearSkyGHI_ineichen, ClearSkyDNI_ineichen, ClearSkyDHI_ineichen]= pvl_clearsky_ineichen(Time, Location);       

% cloudyness_factor = 0.8 * mean(ClearSkyGHI_ineichen ./ GHI)  ;
% modified_ClearSkyGHI_ineichen= ClearSkyGHI_ineichen ./ cloudyness_factor;

% Clear sky GHI from Haurwitz model
[SunAz, SunEl, ApparentSunEl, SolarTime]=pvl_ephemeris(Time, Location);
ApparentZenith = 90-ApparentSunEl;

ClearSkyGHI_haurwitz = pvl_clearsky_haurwitz(ApparentZenith);
  


%%  Plot  Clear Sky Prediction
figure(2)
subplot(3,1,1)
hold on, plot(dt_GHI,ClearSkyGHI_ineichen,'r'), hold off,
hold on, plot(dt_GHI,ClearSkyGHI_haurwitz,'m'), hold off,
%hold on, plot(dt_GHI,modified_ClearSkyGHI_ineichen,'r'), hold off,
legend({'Measurement', 'Clear Sky Prediction (Ineichen)', 'Clear Sky Prediction (Haurwitz)'})
%xlim([dt_past_window(1) - 1/24/60, dt_past_window(end) + 1/24/60  ])





db.close();  %Remember to close the db when finish !!!!
